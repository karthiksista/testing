(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'prop-types', './NavLink'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('prop-types'), require('./NavLink'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes, global.NavLink);
    global.NavLinks = mod.exports;
  }
})(this, function (exports, _react, _propTypes, _NavLink) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _NavLink2 = _interopRequireDefault(_NavLink);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var NavLinks = function (_React$Component) {
    _inherits(NavLinks, _React$Component);

    function NavLinks() {
      _classCallCheck(this, NavLinks);

      return _possibleConstructorReturn(this, (NavLinks.__proto__ || Object.getPrototypeOf(NavLinks)).apply(this, arguments));
    }

    _createClass(NavLinks, [{
      key: 'render',
      value: function render() {
        var _props = this.props,
            navLinks = _props.navLinks,
            indentationLevel = _props.indentationLevel,
            activeNavLinkHref = _props.activeNavLinkHref,
            handleClick = _props.handleClick;

        if (!navLinks || navLinks.length === 0) {
          return null;
        }
        var navLinksComponentsList = navLinks.map(function (currentNavLink) {
          var navLinkProps = {
            text: currentNavLink.text,
            href: currentNavLink.href,
            preIcon: currentNavLink.preIcon,
            postIcon: currentNavLink.postIcon,
            handleClick: handleClick,
            active: activeNavLinkHref === currentNavLink.href,
            indentationLevel: indentationLevel
          };
          var navLinkChildren = currentNavLink.type === 'navLinkWithInnerNav' ? _react2.default.createElement(NavLinks, {
            navLinks: currentNavLink.navItems,
            handleClick: handleClick,
            activeNavLinkHref: activeNavLinkHref,
            indentationLevel: indentationLevel + 1
          }) : null;
          return _react2.default.createElement(
            _NavLink2.default,
            _extends({ key: currentNavLink.text }, navLinkProps),
            navLinkChildren
          );
        }, this);
        return _react2.default.createElement(
          'ul',
          { className: 'nav nav-stacked' },
          navLinksComponentsList
        );
      }
    }]);

    return NavLinks;
  }(_react2.default.Component);

  NavLinks.propTypes = {
    /** List describing navigation links to be rendered */
    navLinks: _propTypes2.default.arrayOf(_propTypes2.default.object).isRequired,
    /** Indentation Level of navigation links. Useful for nested navigation links */
    indentationLevel: _propTypes2.default.number,
    /** Indicates Href of currently active navlink */
    activeNavLinkHref: _propTypes2.default.string,
    /** Call back function for each navigation link */
    handleClick: _propTypes2.default.func
  };

  NavLinks.defaultProps = {
    indentationLevel: 0,
    activeNavLinkHref: ''
  };

  exports.default = NavLinks;
});