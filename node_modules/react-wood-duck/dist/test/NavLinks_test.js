(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['react', 'react-dom/test-utils', '../NavLink', '../NavLinks'], factory);
  } else if (typeof exports !== "undefined") {
    factory(require('react'), require('react-dom/test-utils'), require('../NavLink'), require('../NavLinks'));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.react, global.testUtils, global.NavLink, global.NavLinks);
    global.NavLinks_test = mod.exports;
  }
})(this, function (_react, _testUtils, _NavLink, _NavLinks) {
  'use strict';

  var _react2 = _interopRequireDefault(_react);

  var _testUtils2 = _interopRequireDefault(_testUtils);

  var _NavLink2 = _interopRequireDefault(_NavLink);

  var _NavLinks2 = _interopRequireDefault(_NavLinks);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  describe('NavLinks', function () {
    var simpleNavLinks = [{
      type: 'navLink',
      text: 'Tommy Cambell',
      href: '#tm',
      preIcon: 'fa fa-user'
    }, {
      type: 'navLink',
      text: 'Aubrey Cambell',
      href: '#au',
      preIcon: 'fa fa-user'
    }];
    var navLinksWithSubNavLinks = [{
      type: 'navLink',
      text: 'Screener Summary',
      href: '#summary',
      className: ''
    }, {
      type: 'navLinkWithInnerNav',
      text: 'People & Roles',
      href: '#ppl',
      navItems: [{
        type: 'navLink',
        text: 'Tommy Cambell',
        href: '#tom',
        preIcon: 'fa fa-user',
        postIcon: 'fa fa-exclamation-triangle c-red'
      }, {
        type: 'navLink',
        text: 'Aubrey Cambell',
        href: '#aub',
        preIcon: 'fa fa-user'
      }, {
        type: 'navLink',
        text: 'Chris Cambell',
        href: '#chr',
        preIcon: 'fa fa-user'
      }]
    }];
    var renderer = _testUtils2.default.createRenderer();
    var clickHandler = function clickHandler() {
      console.log('test msg');
    };

    describe('given empty navigation links', function () {
      var nullNavLinksComponent = renderer.render(_react2.default.createElement(_NavLinks2.default, { navLinks: [] }));
      it('renders No nav links', function () {
        expect(nullNavLinksComponent).toBe(null);
      });
    });

    describe('given simple navigation links', function () {
      var simpleNavLinksComponent = renderer.render(_react2.default.createElement(_NavLinks2.default, {
        navLinks: simpleNavLinks,
        handleClick: clickHandler,
        activeNavLinkHref: simpleNavLinks[0].href,
        indentationLevel: 0
      }));
      var simpleNavLinksResultTag = renderer.getRenderOutput(simpleNavLinksComponent);
      it('simple Navigation Links are wrapped in ul tag', function () {
        expect(simpleNavLinksResultTag.type).toBe('ul');
        expect(simpleNavLinksResultTag.props.className).toBe('nav nav-stacked');
        expect(simpleNavLinksResultTag.props.children.length).toBe(2);
      });

      it('renders simple navigation links', function () {
        expect(simpleNavLinksResultTag.props.children).toEqual([_react2.default.createElement(
          _NavLink2.default,
          {
            key: simpleNavLinks[0].text,
            text: simpleNavLinks[0].text,
            href: simpleNavLinks[0].href,
            preIcon: simpleNavLinks[0].preIcon,
            postIcon: simpleNavLinks[0].postIcon,
            handleClick: clickHandler,
            active: true,
            indentationLevel: 0
          },
          null
        ), _react2.default.createElement(
          _NavLink2.default,
          {
            key: simpleNavLinks[1].text,
            text: simpleNavLinks[1].text,
            href: simpleNavLinks[1].href,
            preIcon: simpleNavLinks[1].preIcon,
            postIcon: simpleNavLinks[1].postIcon,
            handleClick: clickHandler,
            active: false,
            indentationLevel: 0
          },
          null
        )]);
      });
    });

    describe('given nested navigation links', function () {
      var navLinksWithSubNavLinksComponent = renderer.render(_react2.default.createElement(_NavLinks2.default, {
        navLinks: navLinksWithSubNavLinks,
        handleClick: clickHandler,
        activeNavLinkHref: navLinksWithSubNavLinks[0].href,
        indentationLevel: 0
      }));
      var navLinksWithSubNavLinksResultTag = renderer.getRenderOutput(navLinksWithSubNavLinksComponent);

      it('renders nested navigation links', function () {
        expect(navLinksWithSubNavLinksResultTag.type).toBe('ul');
        expect(navLinksWithSubNavLinksResultTag.props.children.length).toBe(2);
        expect(navLinksWithSubNavLinksResultTag.props.children).toEqual([_react2.default.createElement(
          _NavLink2.default,
          {
            key: navLinksWithSubNavLinks[0].text,
            text: navLinksWithSubNavLinks[0].text,
            href: navLinksWithSubNavLinks[0].href,
            preIcon: navLinksWithSubNavLinks[0].preIcon,
            postIcon: navLinksWithSubNavLinks[0].postIcon,
            handleClick: clickHandler,
            active: true,
            indentationLevel: 0
          },
          null
        ), _react2.default.createElement(
          _NavLink2.default,
          {
            key: navLinksWithSubNavLinks[1].text,
            text: navLinksWithSubNavLinks[1].text,
            href: navLinksWithSubNavLinks[1].href,
            preIcon: navLinksWithSubNavLinks[1].preIcon,
            postIcon: navLinksWithSubNavLinks[1].postIcon,
            handleClick: clickHandler,
            active: false,
            indentationLevel: 0
          },
          _react2.default.createElement(_NavLinks2.default, {
            navLinks: navLinksWithSubNavLinks[1].navItems,
            handleClick: clickHandler,
            activeNavLinkHref: navLinksWithSubNavLinks[0].href,
            indentationLevel: 1
          })
        )]);
      });
    });
  });
});