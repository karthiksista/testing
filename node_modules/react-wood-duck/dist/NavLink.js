(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'prop-types'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('prop-types'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes);
    global.NavLink = mod.exports;
  }
})(this, function (exports, _react, _propTypes) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var NavLink = function (_React$Component) {
    _inherits(NavLink, _React$Component);

    function NavLink() {
      _classCallCheck(this, NavLink);

      return _possibleConstructorReturn(this, (NavLink.__proto__ || Object.getPrototypeOf(NavLink)).apply(this, arguments));
    }

    _createClass(NavLink, [{
      key: 'render',
      value: function render() {
        var _this2 = this;

        var preIcon = this.props.preIcon ? _react2.default.createElement('i', { className: this.props.preIcon }) : null;
        var postIcon = this.props.postIcon ? _react2.default.createElement('i', { className: this.props.postIcon + ' post-navlink-icon' }) : null;
        var activeNavLinkClassName = this.props.active ? 'active-navlink' : 'inactive-navlink';
        var activeAnchorClassName = this.props.active ? 'active' : '';
        var indentationStyle = {
          marginRight: this.props.indentationLevel * 3 + 'rem'
        };
        return _react2.default.createElement(
          'li',
          { className: 'navlink', key: this.props.text },
          _react2.default.createElement('span', { className: activeNavLinkClassName, style: indentationStyle }),
          preIcon,
          _react2.default.createElement(
            'a',
            {
              href: this.props.href,
              className: activeAnchorClassName,
              onClick: function onClick(e) {
                return _this2.props.handleClick(_this2.props.href, e);
              }
            },
            this.props.text
          ),
          postIcon,
          this.props.children
        );
      }
    }]);

    return NavLink;
  }(_react2.default.Component);

  NavLink.propTypes = {
    /** NavLink Text  */
    text: _propTypes2.default.string.isRequired,
    /** NavLink url/href */
    href: _propTypes2.default.string.isRequired,
    /** Pre Icon css class name(s) */
    preIcon: _propTypes2.default.string,
    /** Post Icon css class name(s) */
    postIcon: _propTypes2.default.string,
    /** Indicates if current NavLink is actively selected */
    active: _propTypes2.default.bool,
    /** Hyperlink On Click Handler */
    handleClick: _propTypes2.default.func,
    /** It is used to align nested Navigation links */
    indentationLevel: _propTypes2.default.number,
    /** This property is used to display nested elements under NavLink  */
    children: _propTypes2.default.node
  };

  NavLink.defaultProps = {
    preIcon: '',
    postIcon: '',
    active: false,
    handleClick: null,
    indentationLevel: 0,
    children: null
  };

  exports.default = NavLink;
});