(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'prop-types', './NavLinksContainer'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('prop-types'), require('./NavLinksContainer'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes, global.NavLinksContainer);
    global.SideNav = mod.exports;
  }
})(this, function (exports, _react, _propTypes, _NavLinksContainer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _NavLinksContainer2 = _interopRequireDefault(_NavLinksContainer);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var SideNav = function (_React$Component) {
    _inherits(SideNav, _React$Component);

    function SideNav() {
      _classCallCheck(this, SideNav);

      return _possibleConstructorReturn(this, (SideNav.__proto__ || Object.getPrototypeOf(SideNav)).apply(this, arguments));
    }

    _createClass(SideNav, [{
      key: 'render',
      value: function render() {
        var classField = 'container hidden-xs col-md-' + this.props.columnWidth + ' side-nav';
        if (!this.props.content || this.props.content.length === 0) {
          return null;
        } else {
          var sideNavComponents = this.props.content.map(function (sideNavItem, index) {
            if (sideNavItem.type === 'navLinks') return _react2.default.createElement(
              'div',
              {
                className: 'row',
                key: index,
                role: 'navigation',
                'aria-label': 'Main Content Navigation Menu'
              },
              _react2.default.createElement(_NavLinksContainer2.default, { navLinks: sideNavItem.navItems })
            );
          });
          return _react2.default.createElement(
            'div',
            { className: classField, 'aria-label': 'Side Nav' },
            sideNavComponents
          );
        }
      }
    }]);

    return SideNav;
  }(_react2.default.Component);

  SideNav.propTypes = {
    content: _propTypes2.default.arrayOf(_propTypes2.default.object).isRequired,
    columnWidth: _propTypes2.default.number
  };

  SideNav.defaultProps = {
    columnWidth: 3
  };

  exports.default = SideNav;
});